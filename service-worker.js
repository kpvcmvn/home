// üßπ Service Worker s·∫°ch ‚Äî kh√¥ng cache, lu√¥n t·∫£i m·ªõi nh·∫•t
self.addEventListener('install', (event) => {
  console.log('[Service Worker] Installing new version...');
  // B·ªè qua b∆∞·ªõc ch·ªù, k√≠ch ho·∫°t ngay l·∫≠p t·ª©c
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activating and cleaning up old cache...');
  event.waitUntil(
    (async () => {
      // X√≥a to√†n b·ªô cache c≈©
      const cacheNames = await caches.keys();
      await Promise.all(cacheNames.map((cache) => caches.delete(cache)));

      // H·ªßy ƒëƒÉng k√Ω service worker c≈© (n·∫øu c√≥)
      const registrations = await self.registration.unregister();
      console.log('[Service Worker] Unregistered old SW:', registrations);

      // L√†m m·ªõi t·∫•t c·∫£ tab ƒëang m·ªü
      const clientsList = await self.clients.matchAll({ type: 'window' });
      clientsList.forEach((client) => client.navigate(client.url));
    })()
  );
});

// ‚ö° M·∫∑c ƒë·ªãnh: kh√¥ng cache g√¨ c·∫£, lu√¥n l·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ m·∫°ng
self.addEventListener('fetch', (event) => {
  // Ch·ªâ x·ª≠ l√Ω y√™u c·∫ßu GET
  if (event.request.method !== 'GET') return;

  event.respondWith(
    fetch(event.request)
      .then((response) => {
        return response;
      })
      .catch(() => {
        // N·∫øu offline, fallback t·∫°m sang index.html (t√πy ch·ªçn)
        return caches.match('./index.html');
      })
  );
});
